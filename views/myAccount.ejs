<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Main Page</title>

   
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <link href="https://fonts.googleapis.com/css2?family=Material+Icons+Sharp" rel="stylesheet">
    <link rel="stylesheet" href="../frontend/css/myAccount.css">

</head>
<body>

    <!-- navbar -->
    <nav>
        <div class="container">
            <img src="../frontend/images/fsrs.png" class="logo" alt="logo">
            <div class="search-bar">
                <span class="material-icons-sharp">search</span>
                <input type="search" placeholder="Search">
            </div>
            <div class="profile-area">
                <div class="theme-btn">
                    <span class="material-icons-sharp active">light_mode</span>
                    <span class="material-icons-sharp">dark_mode</span>
                </div>
                <div class="profile-photo">
                    <img src="<%= user.profileImage %>" alt="<%= user.fullName %>'s Profile Picture">
                </div>
                <div class="profile">
                    <h5><%= fullName %></h5>
                    <span class="material-icons-sharp">expand_more</span>
                </div>
                <button id="menu-btn">
                    <span class="material-icons-sharp">menu</span>
                </button>
            </div>
        </div>
    </nav>

    <!-- main -->

    <main>

        <!-- aside -->
        <aside>
            <button id="close-btn">
                <span class="material-icons-sharp">close</span>
            </button>
            <div class="sidebar">
                <a href="#" class="active">
                    <span class="material-icons-sharp">dashboard</span>
                    <h4>Dashboard</h4>
                </a>
                <a href="#">
                    <span class="material-icons-sharp">currency_exchange</span>
                    <h4>Market</h4>
                </a>
                <a href="#">
                    <span class="material-icons-sharp">pie_chart</span>
                    <h4>Analytics</h4>
                </a>
                <a href="#">
                    <span class="material-icons-sharp">help_center</span>
                    <h4>Help Center</h4>
                </a>
                <a href="#">
                    <span class="material-icons-sharp">settings</span>
                    <h4>Settings</h4>
                </a>
            </div>
            <div class="updates">
                <span class="material-icons-sharp">update</span>
                <h4>Updates Available</h4>
                <small>Security Updates</small>
                <small>General Updates</small>
                <a href="#">Update Now</a>
            </div>
        </aside>

        <!--Middle Section-->
        <div class="main-part">
            <!-- Right Half - General Information, Contact Information, Profile Image, and Name -->
            <div class="leftContainer">
                <div id="tab1" class="tab-content tab1 active">
                    <div class="text-center">
                        <img src="<%= user.profileImage %>" alt="Profile Picture" class="profilePic" id="profilePic">
                        <a href="/updateUser"><button id="editBtn">Edit Profile</button></a> 
                    </div>
                    <div class="generalInfo">
                        <h3 class="heading">General Information</h3>
                        <ul id="generalInfoList">
                            <li>Full Name: <span id="fullName"><%= user.fullName %></span></li>
                            <!-- <li>Date of Birth: <span id="dob">January 1, 1990</span></li> -->
                            <!-- <li>Gender: <span id="gender">Male</span></li> -->
                            <li>Email Address: <span id="email"><%= user.email %></span></li>
                            <li>Phone Number: <span id="phone"><%= user.phone %></span></li>
                        </ul>
                    </div>
                </div>
            
    
    <!-- add librarian -->
    <script>
        document.addEventListener('click', async function(event) {
            if (event.target.id === 'addLibrarianBtn') {
                event.preventDefault();
        
                const fullName = document.getElementById('fullName').value;
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
        
                if (password !== confirmPassword) {
                    alert('Passwords do not match');
                    return;
                }
        
                try {
                    const res = await fetch('/create-librarian-account', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ fullName: fullName, email: email, password: password }),
                    });
                    const data = await res.json();
                    if (data.error) {
                        let errorMessage = '';
                        if (data.error.includes('E11000 duplicate key error')) {
                            errorMessage += 'This email is already registered';
                        }
                        if (data.error.includes('Minimum password length is 6 characters')) {
                            errorMessage += 'Password must be at least 6 characters';
                        }
                        alert(errorMessage);
                    }
        
                    if (data.user) {  
                        alert('Librarian account created successfully');
                    }
                } catch (err) {
                    console.log(err);
                }
            }
        });
        </script>
    
    <!-- refresh prevention when remove book from wishlist -->
    <script>
        $(document).ready(function() {
            $('.removeBookForm').submit(function(e) {
                e.preventDefault();
    
                var $form = $(this);
                var bookId = $form.attr('action').split('/').pop();
    
                $.ajax({
                    url: $form.attr('action'),
                    type: 'post',
                    success: function() {
                        // Remove the parent tr of the form that was submitted
                        $form.closest('tr').remove();
                    },
                    error: function() {
                        // Handle error here. For example, you can show an error message.
                    }
                });
            });
        });
    </script>
    
    <!-- remove all wishlist -->
    <script>
        async function clearFavoriteBooks() {
            try {
                const response = await fetch('/clearWishlist', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
    
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
    
                // Clear the favorite books on the page
                const favoriteBooksElement = document.getElementById('tab2');
                if (favoriteBooksElement) {
                    while (favoriteBooksElement.firstChild) {
                        favoriteBooksElement.removeChild(favoriteBooksElement.firstChild);
                    }
    
                    // Add a message indicating that there are no favorite books
                    const messageElement = document.createElement('p');
                    messageElement.textContent = 'All books have been removed from the wishlist.';
                    favoriteBooksElement.appendChild(messageElement);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>
    
    <!-- Reserved to Borrowing -->
    <script>
        document.querySelectorAll('.borrow-button').forEach(button => {
          button.addEventListener('click', function() {
            const transactionId = this.getAttribute('data-id');
            console.log('transactionId:', transactionId);
    
            // Update the status cell in the row
            const row = this.parentElement.parentElement;
            const statusCell = row.children[3]; // The status cell is the 4rd cell in the row
            statusCell.innerText = 'Borrowed'; // Change 'Returned' to 'Borrowed'
            
            // Remove the borrow button
            this.remove(); // Change this to remove only the button
    
            // Move the row to the "Finished Reservation" table
            const finishedTable = document.querySelectorAll('table')[1].querySelector('tbody'); // The finished table is the 2nd table in the document
            finishedTable.appendChild(row);
    
            fetch(`/reservations/borrow`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ transactionId: transactionId }),
            })
            .then(response => response.text()) // Change this to response.text() if the server is sending a string
            .then(data => {
                console.log(data);
                if (data === 'Transaction was saved') { // Check if the server response is 'Transaction was saved'
                    console.log('Successfully borrowed transaction');
                } else {
                    console.error('Failed to borrow transaction');
                }
            })
            .catch(error => console.error('Error:', error));
          });
        });
    </script>
    
    <!-- borrowing to past reservation -->
    <script>
        document.querySelectorAll('.return-button').forEach(button => {
          button.addEventListener('click', function() {
            const transactionId = this.getAttribute('data-id');
            console.log('transactionId:', transactionId);
        
            fetch(`/reservations/return`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id: transactionId }),
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // Update the status cell in the row
                const row = this.parentElement.parentElement;
                const statusCell = row.children[3]; // The status cell is the 4rd cell in the row
                statusCell.innerText = 'Returned';
                
                // Remove the return button
                this.parentElement.remove();
      
                // Move the row to the "Finished Reservation" table
                const finishedTable = document.querySelectorAll('table')[2].querySelector('tbody'); // The finished table is the 3nd table in the document
                finishedTable.appendChild(row);
                console.log('Successfully returned transaction');
              } else {
                console.error('Failed to return transaction');
              }
            })
            .catch(error => console.error('Error:', error));
          });
        });
    </script>
    <!-- add author popup -->
    <script>
        const addauthorinfor = document.querySelector('#addauthorinfor');
        const authorNameError = document.querySelector('.authorName.error');
        addauthorinfor.addEventListener('submit', async (e) => {
            e.preventDefault();
    
            const name = addauthorinfor.authorName.value;
    
            try {
                const res = await fetch('/author', {
                    method: 'POST',
                    body: JSON.stringify({ name }),
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await res.json();
                console.log(data);
                if (data.errors) {
                    authorNameError.textContent = data.errors.name;
                }
                else {
                    authorNameError.textContent = ('Added successfully');
                }
            }
            catch (err) {
                console.log(err);
            }
        });
    </script>
    
    <!-- add publisher popup -->
    <script>
        const addpublisherinfor = document.querySelector('#addpublisherinfor');
        const publisherNameError = document.querySelector('.publisherName.error');
        addpublisherinfor.addEventListener('submit', async (e) => {
            e.preventDefault();
    
            const name = addpublisherinfor.publisherName.value;
    
            try{
                const res = await fetch('/publisher', {
                    method: 'POST',
                    body: JSON.stringify({ name }),
                    headers: { 'Content-Type': 'application/json'}
                });
                const data = await res.json();
                console.log(data);
                if (data.errors){
                    publisherNameError.textContent = data.errors.name;
                }
                else{
                    publisherNameError.textContent = ('Added successfully');
                }
            }
            catch (err){
                console.log(err);
            }
        });
    </script>
    
        <!-- Delete author -->
        <script>
        $(document).ready(function() {
            $('.author-remove').click(function(event) {
                event.preventDefault();
                const row = $(this).closest('tr');
                const authorId = $(this).data('id');
                $.ajax({
                    url: '/deleteAuthor/' + authorId,
                    type: 'POST',
                    success: function(response) {
                        row.remove();
                    }
                });
            });
        });
        </script>
    
        <!-- Delete publisher -->
        <script>
            $(document).ready(function() {
                $('.publisher-remove').click(function(event) {
                    event.preventDefault();
    
                    const row = $(this).closest('tr');
                    const publisherId = $(this).data('id');
                    $.ajax({
                        url: '/deletePublisher/' + publisherId,
                        type: 'POST',
                        success: function(response) {
                            row.remove();
                        }
                    });
                });
            });
            </script>
    
        <!-- Search -->
        <script>
            document.getElementById('searchInputreservation').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const rows = document.querySelectorAll('#bookTable tbody tr');
        
                rows.forEach(row => {
                    const cells = Array.from(row.getElementsByClassName('searchablereservation'));
                    const cellText = cells.map(cell => cell.textContent.toLowerCase()).join(' ');
        
                    if (cellText.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        </script>
        <script>
            document.getElementById('searchInputborrow').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const rows = document.querySelectorAll('#bookTable tbody tr');
    
                rows.forEach(row => {
                    const cells = Array.from(row.getElementsByClassName('searchableborrow'));
                    const cellText = cells.map(cell => cell.textContent.toLowerCase()).join(' ');
    
                    if (cellText.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        </script>
        <script>
            document.getElementById('searchInputreturn').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const rows = document.querySelectorAll('#bookTable tbody tr');
    
                rows.forEach(row => {
                    const cells = Array.from(row.getElementsByClassName('searchablereturn'));
                    const cellText = cells.map(cell => cell.textContent.toLowerCase()).join(' ');
    
                    if (cellText.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        </script>
        <script>
            document.getElementById('searchInputauthor').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const rows = document.querySelectorAll('.styled-table tbody tr');
    
                rows.forEach(row => {
                    const cells = Array.from(row.getElementsByClassName('searchableauthor'));
                    const cellText = cells.map(cell => cell.textContent.toLowerCase()).join(' ');
    
                    if (cellText.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        </script>
        <script>
            document.getElementById('searchInputpublisher').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const rows = document.querySelectorAll('.styled-table tbody tr');
        
                rows.forEach(row => {
                    const cells = Array.from(row.getElementsByClassName('searchablepublisher'));
                    const cellText = cells.map(cell => cell.textContent.toLowerCase()).join(' ');
        
                    if (cellText.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        </script>
    
    <script>
        // Get the search icon and form elements
        const searchIcon = document.getElementById('search-icon');
        const searchForm = document.querySelector('.search-form');
    
        // Add a click event listener to the search icon
        searchIcon.addEventListener('click', function() {
            // Submit the form when the search icon is clicked
            searchForm.submit();
        });
    </script>
    <script src="simpleScript.js"></script>
</body>
</html>
